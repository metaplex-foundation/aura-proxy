name: Aura-Proxy

on:
  push:
    branches:
      - develop
      - feature/*
      - fix/*
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Continuous Integration
    if: >
      (github.event_name == 'push' && (
        startsWith(github.ref, 'refs/heads/develop') ||
        startsWith(github.ref, 'refs/heads/main') ||
        startsWith(github.ref, 'refs/tags/') ||
        ((startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/fix/')) && contains(github.event.head_commit.message, 'deploy'))
      ))
      || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.define_vars.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define Application Variables
        id: define_vars
        run: |
          echo "APP=$(basename -s .git $(git remote get-url origin))" >> $GITHUB_ENV
          ver=$(
            [[ "$GITHUB_REF" == refs/tags/* ]] && \
              echo "${GITHUB_REF#refs/tags/}" || \
            (
              branch="${GITHUB_REF#refs/heads/}" && \
              branch=$(echo "$branch" | sed 's/\//-/g') && \
              sha=$(git rev-parse --short HEAD) && \
              echo "${branch}-${sha}"
            )
          )
          echo "Version: $ver"
          echo "version=${ver}" >> "$GITHUB_OUTPUT"
          echo "VERSION=${ver}" >> "$GITHUB_ENV"

      - name: Notify Start CI
        uses: ./.github/actions/telegram
        with:
          message: "üöÄ CI started by <b>${{ github.actor }}</b> for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Setup Git Credentials for Private Repos
        env:
          RO_GITHUB_PAT: ${{ secrets.RO_GITHUB_PAT }}
        run: |
          git config --global url."https://${{ secrets.RO_GITHUB_PAT }}@github.com/".insteadOf "https://github.com/"
          go env -w GOPRIVATE=github.com/adm-metaex

      - name: Run test
        run: make test

      - name: Notify Test Passed
        if: success()
        uses: ./.github/actions/telegram
        with:
          message: "‚úÖ Tests passed for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Test Failed
        if: failure()
        uses: ./.github/actions/telegram
        with:
          message: "‚ùå Tests failed for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        env:
          REGISTRY: ghcr.io/${{ github.repository_owner }}
          RO_GITHUB_PAT: ${{ secrets.RO_GITHUB_PAT }}
          VERSION: ${{ env.VERSION }}
        run: make image push VERSION="$VERSION"

      - name: Notify Build Complete
        if: success()
        uses: ./.github/actions/telegram
        with:
          message: "üê≥ Docker image built and pushed successfully for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Build Failed
        if: failure()
        uses: ./.github/actions/telegram
        with:
          message: "‚ùå Build failed for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

  cd:
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define Application Variables
        run: |
          echo "APP=$(basename -s .git $(git remote get-url origin))" >> $GITHUB_ENV
          echo "VERSION=${{ needs.ci.outputs.version }}" >> $GITHUB_ENV

      - name: Notify Start CD
        uses: ./.github/actions/telegram
        with:
          message: "üöÄ CD started for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Validate YAML Files
        uses: docker://cytopia/yamllint:latest
        with:
          args: docker-compose.yml

      - name: Notify Validation Passed
        if: success()
        uses: ./.github/actions/telegram
        with:
          message: "‚úÖ YAML validation passed for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Validation Failed
        if: failure()
        uses: ./.github/actions/telegram
        with:
          message: "‚ùå YAML validation failed for <b>${{ env.APP }}</b> version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Update Docker Compose Image Tag
        uses: mikefarah/yq@master
        with:
          cmd: yq eval -i '.services[env(APP)].image = "ghcr.io/" + env(GITHUB_REPOSITORY_OWNER) + "/" + env(APP) + "/" + env(APP) + ":" + env(VERSION)' docker-compose.yml

      - name: Notify Image Tag Updated
        if: success()
        uses: ./.github/actions/telegram
        with:
          message: "üîÑ Docker Compose image tag updated for <b>${{ env.APP }}</b> to version <b>${{ env.VERSION }}</b>"
          telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram_chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Commit and Push Changes
        if: success()
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -am "${{ github.actor }} update $APP version to $VERSION"
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "Detected tag build. Pushing to main branch."
            git push origin HEAD:main
          else
            echo "Branch build detected. Pushing current branch."
            git push
          fi

      - name: Checkout External Config Repository
        uses: actions/checkout@v4
        with:
          repository: adm-metaex/aura-config-dev
          token: ${{ secrets.CD_GITHUB_PAT }}
          fetch-depth: 0

      - name: Update Aura Proxy Version
        run: |
          yq eval -i '.aura_proxy_version = env(VERSION)' versions.yml
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add versions.yml
          git commit -m "Update aura_proxy_version to $VERSION"
          git push

      - name: Notify CD Complete
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode=HTML \
          -d text="‚úÖ CD complete by <b>${{ github.actor }}</b>. The <b>versions.yml</b> file has been successfully updated for <b>${{ env.APP }}</b> to version <b>${{ env.VERSION }}</b>."

      - name: Notify CD Failed
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode=HTML \
          -d text="‚ùå CD failed. Triggered by <b>${{ github.actor }}</b> version <b>${{ env.VERSION }}</b>"
